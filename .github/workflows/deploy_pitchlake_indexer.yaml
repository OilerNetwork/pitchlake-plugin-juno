name: Docker Build, Push and Deploy Pitchlake Indexer
on:
  push:
    branches:
      - indexer-cicd

env:
    AWS_REGION: eu-central-1
    ECR_REPOSITORY: pitchlake-ui-new_images_repository
    ECR_REGISTRY: 654654236251.dkr.ecr.eu-central-1.amazonaws.com
    EC2_SERVICE: pitchlake-indexer-instance
    EC2_HOST: ${{ vars.EC2_HOST }}
    EC2_USER: ${{ vars.EC2_USER }}
    PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
    APP_PORT: ${{ vars.APP_PORT }}
    CONTAINER_NAME: pitchlake_plugin_juno
    L1_URL: ${{ secrets.L1_URL }}
    DB_URL: ${{ secrets.DB_URL }}
    UDC_ADDRESS: ${{ vars.UDC_ADDRESS }}
    VAULT_HASH: ${{ vars.VAULT_HASH }}

permissions:
  id-token: write
  contents: write

jobs:
  build_push_deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check if Docker is installed
        run: |
          if ! command -v docker &> /dev/null
          then
            sudo apt update
            sudo apt install -y docker.io
            sudo apt install -y docker-compose
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::654654236251:role/terraform-20241003185909187100000001
          role-session-name: Github
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      #   run: |
      #     IMAGE_TAG=pitchlake-indexer-${{ github.sha }}
      #     IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
      #     docker buildx build --platform=linux/amd64 -f ./Dockerfile -t $IMAGE_URI ./
      #     docker push $IMAGE_URI
      
      - name: Change key permission
        run: |
          echo "${{ env.PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Login to AWS ECR from EC2 instance, pull and deploy image
        env: 
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: pitchlake-indexer-3def9a97faab625c9d10a4eb504d2aa8072c4855
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          L1_URL: ${{ secrets.L1_URL }}
          DB_URL: ${{ secrets.DB_URL }}
        run: |
          ssh -v -o StrictHostKeyChecking=no -i private_key.pem ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            sudo docker ps -aq | xargs docker stop | xargs docker rm
            sudo docker rmi $(sudo docker images -q)
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            sudo docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              -e VAULT_HASH=${{ env.VAULT_HASH }} \
              -e UDC_ADDRESS=${{ env.UDC_ADDRESS }} \
              -e L1_URL=${env.L1_URL} \
              -e DB_URL=${env.DB_URL} \
              -v $HOME/snapshots/juno_testnet:/snapshots \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            "
      
      - name: Logout from AWS ECR on EC2
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        run: |
          ssh -v -o StrictHostKeyChecking=no -i private_key.pem ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker logout ${ECR_REGISTRY}
          "
      
      - name: Cleanup private key
        run: rm private_key.pem
      


      
      